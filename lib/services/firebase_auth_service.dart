import 'package:flutter/foundation.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import '../models/user.dart' as app_user;
import 'high_score_service.dart';
import 'quiz_provider.dart';

/// Service d'authentification Firebase
class FirebaseAuthService extends ChangeNotifier {
  FirebaseAuth? _auth;
  app_user.User? _currentUser;
  bool _isLoading = false;

  // Services connect√©s pour la synchronisation des donn√©es
  HighScoreService? _highScoreService;
  QuizProvider? _quizProvider;

  app_user.User? get currentUser => _currentUser;
  bool get isLoading => _isLoading;
  bool get isAuthenticated => _currentUser != null;
  bool get isGuest => _currentUser?.isGuest ?? false;

  /// Connecte les services pour la synchronisation des donn√©es
  void connectServices({
    HighScoreService? highScoreService,
    QuizProvider? quizProvider,
  }) {
    _highScoreService = highScoreService;
    _quizProvider = quizProvider;
  }

  /// Initialise le service Firebase
  Future<void> initialize() async {
    _isLoading = true;
    notifyListeners();

    try {
      // Initialiser Firebase
      await Firebase.initializeApp(
        options:
            kIsWeb
                ? const FirebaseOptions(
                  // üî• CONFIGURATION FIREBASE R√âELLE üî•
                  apiKey: "AIzaSyAXQNRP6ubidjX7X7W3V37SN_GdP5qNxnw",
                  authDomain: "quiz-app-firebase-5d348.firebaseapp.com",
                  projectId: "quiz-app-firebase-5d348",
                  storageBucket: "quiz-app-firebase-5d348.firebasestorage.app",
                  messagingSenderId: "202628820831",
                  appId: "1:202628820831:web:ec4de7df7acc9739a410ea",
                  measurementId: "G-SME68GQZ8P",
                )
                : null,
      );

      // Initialiser l'instance FirebaseAuth
      _auth = FirebaseAuth.instance;

      // √âcouter les changements d'√©tat d'authentification
      _auth!.authStateChanges().listen(_onAuthStateChanged);

      if (kDebugMode) {
        print('üî• Firebase Auth Service initialis√©');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur initialisation Firebase: $e');
      }
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// G√®re les changements d'√©tat d'authentification
  void _onAuthStateChanged(User? firebaseUser) {
    if (firebaseUser != null) {
      _currentUser = app_user.User(
        id: firebaseUser.uid,
        name: firebaseUser.displayName ?? 'Utilisateur',
        email: firebaseUser.email,
        isGuest: false,
      );

      // Notifier les services du changement d'utilisateur
      _highScoreService?.setCurrentUser(firebaseUser.uid);
      _quizProvider?.setCurrentUser(firebaseUser.uid);

      if (kDebugMode) {
        print(
          'üî• Utilisateur connect√©: ${_currentUser?.displayName} (${firebaseUser.uid})',
        );
      }
    } else {
      _currentUser = null;

      // Notifier les services de la d√©connexion
      _highScoreService?.setCurrentUser(null);
      _quizProvider?.setCurrentUser(null);

      if (kDebugMode) {
        print('üî• Utilisateur d√©connect√©');
      }
    }

    notifyListeners();

    if (kDebugMode) {
      print(
        'üî• √âtat auth chang√©: ${_currentUser?.displayName ?? 'D√©connect√©'}',
      );
    }
  }

  /// Connexion avec email et mot de passe
  Future<void> signIn(String email, String password) async {
    if (_auth == null) throw Exception('Firebase non initialis√©');

    _isLoading = true;
    notifyListeners();

    try {
      final credential = await _auth!.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      if (kDebugMode) {
        print('‚úÖ Connexion Firebase r√©ussie: ${credential.user?.email}');
      }
    } on FirebaseAuthException catch (e) {
      String message = _getErrorMessage(e.code);
      if (kDebugMode) {
        print('‚ùå Erreur connexion Firebase: ${e.code} - $message');
      }
      throw Exception(message);
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur connexion: $e');
      }
      throw Exception('Erreur de connexion');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// Inscription avec email et mot de passe
  Future<void> signUp(String email, String password, String name) async {
    if (_auth == null) throw Exception('Firebase non initialis√©');

    _isLoading = true;
    notifyListeners();

    try {
      final credential = await _auth!.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      // Mettre √† jour le profil avec le nom
      await credential.user?.updateDisplayName(name);

      if (kDebugMode) {
        print('‚úÖ Inscription Firebase r√©ussie: ${credential.user?.email}');
      }
    } on FirebaseAuthException catch (e) {
      String message = _getErrorMessage(e.code);
      if (kDebugMode) {
        print('‚ùå Erreur inscription Firebase: ${e.code} - $message');
      }
      throw Exception(message);
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur inscription: $e');
      }
      throw Exception('Erreur d\'inscription');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// Connexion en tant qu'invit√©
  void signInAsGuest() {
    _currentUser = app_user.User(
      id: 'guest_${DateTime.now().millisecondsSinceEpoch}',
      name: 'Invit√©',
      email: null,
      isGuest: true,
    );

    if (kDebugMode) {
      print('‚úÖ Connexion en tant qu\'invit√©');
    }

    notifyListeners();
  }

  /// D√©connexion
  Future<void> signOut() async {
    _isLoading = true;
    notifyListeners();

    try {
      if (!isGuest && _auth != null) {
        await _auth!.signOut();
      } else {
        _currentUser = null;
      }

      if (kDebugMode) {
        print('‚úÖ D√©connexion Firebase r√©ussie');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur d√©connexion Firebase: $e');
      }
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// R√©initialisation du mot de passe
  Future<void> resetPassword(String email) async {
    if (_auth == null) throw Exception('Firebase non initialis√©');

    _isLoading = true;
    notifyListeners();

    try {
      await _auth!.sendPasswordResetEmail(email: email);

      if (kDebugMode) {
        print('‚úÖ Email de r√©initialisation envoy√© √†: $email');
      }
    } on FirebaseAuthException catch (e) {
      String message = _getErrorMessage(e.code);
      if (kDebugMode) {
        print('‚ùå Erreur r√©initialisation Firebase: ${e.code} - $message');
      }
      throw Exception(message);
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur r√©initialisation: $e');
      }
      throw Exception('Erreur de r√©initialisation');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// Met √† jour le profil utilisateur
  Future<void> updateProfile({String? name, String? email}) async {
    if (_currentUser == null || isGuest) return;

    _isLoading = true;
    notifyListeners();

    try {
      final user = _auth?.currentUser;
      if (user != null) {
        if (name != null) {
          await user.updateDisplayName(name);
        }
        if (email != null) {
          await user.verifyBeforeUpdateEmail(email);
        }
        await user.reload();
      }

      if (kDebugMode) {
        print('‚úÖ Profil Firebase mis √† jour');
      }
    } on FirebaseAuthException catch (e) {
      String message = _getErrorMessage(e.code);
      if (kDebugMode) {
        print('‚ùå Erreur mise √† jour profil Firebase: ${e.code} - $message');
      }
      throw Exception(message);
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur mise √† jour profil: $e');
      }
      throw Exception('Erreur de mise √† jour');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// Convertit les codes d'erreur Firebase en messages lisibles
  String _getErrorMessage(String errorCode) {
    switch (errorCode) {
      case 'user-not-found':
        return 'Aucun utilisateur trouv√© avec cet email';
      case 'wrong-password':
        return 'Mot de passe incorrect';
      case 'email-already-in-use':
        return 'Un compte existe d√©j√† avec cet email';
      case 'weak-password':
        return 'Le mot de passe est trop faible';
      case 'invalid-email':
        return 'Adresse email invalide';
      case 'user-disabled':
        return 'Ce compte a √©t√© d√©sactiv√©';
      case 'too-many-requests':
        return 'Trop de tentatives. R√©essayez plus tard';
      case 'operation-not-allowed':
        return 'Op√©ration non autoris√©e';
      case 'requires-recent-login':
        return 'Veuillez vous reconnecter pour cette op√©ration';
      default:
        return 'Une erreur est survenue';
    }
  }

  /// V√©rifie si l'utilisateur est connect√©
  bool get isSignedIn => _auth?.currentUser != null || isGuest;

  /// Obtient l'utilisateur Firebase actuel
  User? get firebaseUser => _auth?.currentUser;
}
